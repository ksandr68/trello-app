{"version":3,"sources":["styles/styles.ts","actions/types.ts","components/NewItemForm.tsx","hooks/useFocus.ts","components/AddNewItem.tsx","dragAndDrop/DragItem.ts","utils/findItemIndexById.ts","reducers/appState.ts","utils/moveItem.ts","components/AppStateContext.tsx","hooks/useAppState.ts","hooks/useItemDrag.ts","utils/isHidden.ts","components/Card.tsx","components/Column.tsx","dragAndDrop/customDragLayer.tsx","components/App.tsx","index.tsx"],"names":["ActionTypes","AppContainer","styled","div","ColumnTitle","AddItemButton","button","props","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","DragPreviewContainer","isHidden","isPreview","undefined","ColumnContainer","CustomDragLayerContainer","CardContainer","NewItemForm","onAdd","useState","text","setText","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","DragTypes","findItemIndexById","items","id","findIndex","item","appStateReducer","state","action","type","addList","lists","nanoid","payload","tasks","addTask","targetLaneIndex","listId","push","moveList","dragIndex","hoverIndex","array","from","to","startIndex","length","moveItem","setDraggedItem","draggedItem","moveTask","sourceColumn","targetColumn","sourceLaneIndex","splice","appData","AppStateContext","createContext","AppStateProvider","children","useReducer","dispatch","Provider","useAppState","useContext","useItemDrag","useDrag","begin","end","drag","preview","getEmptyImage","captureDraggingState","itemType","Boolean","Card","index","columnId","card","useDrop","accept","hover","drop","Column","column","map","task","taskIndex","key","console","log","getItemStyles","currentOffset","display","x","y","transform","WebkitTransform","CustomDragLayer","useDragLayer","monitor","getItem","getSourceClientOffset","isDragging","style","App","list","i","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.0de95370.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const AppContainer = styled.div`\n  align-items: flex-start;\n  background-color: #3179ba;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  padding: 20px;\n  width: 100%;\n`;\n\nexport const ColumnTitle = styled.div`\n  padding: 6px 16px 12px;\n  font-weight: bold;\n`;\n\ninterface AddItemButtonProps {\n  dark?: boolean;\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n  background-color: #ffffff3d;\n  border-radius: 3px;\n  border: none;\n  color: ${(props) => (props.dark ? \"#000\" : \"#fff\")};\n  cursor: pointer;\n  max-width: 300px;\n  padding: 10px 12px;\n  text-align: left;\n  transition: background 85ms ease-in;\n  width: 100%;\n  &:hover {\n    background: #ffffff52;\n  }\n`;\n\nexport const NewItemFormContainer = styled.div`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: flex-start;\n`;\n\nexport const NewItemButton = styled.button`\n  background-color: #5aac44;\n  border-radius: 3px;\n  border: none;\n  box-shadow: none;\n  color: #fff;\n  padding: 6px 12px;\n  text-align: center;\n`;\n\nexport const NewItemInput = styled.input`\n  border-radius: 3px;\n  border: none;\n  box-shadow: #091e4240 0 1px 0 0;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  width: 100%;\n`;\n\ninterface DragPreviewContainerProps {\n  isHidden?: boolean;\n  isPreview?: boolean;\n}\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n  opacity: ${(props) => (props.isHidden ? 0 : 1)};\n  transform: ${(props) => (props.isPreview ? \"rotate(5deg)\" : undefined)};\n`;\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n  background-color: #ebecf0;\n  width: 300px;\n  min-height: 40px;\n  margin-right: 20px;\n  border-radius: 3px;\n  padding: 8px;\n  flex-grow: 0;\n`;\n\nexport const CustomDragLayerContainer = styled.div`\n  height: 100%;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n`;\n\nexport const CardContainer = styled(DragPreviewContainer)`\n  background: #fff;\n  cursor: pointer;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  max-width: 300px;\n  border-radius: 3px;\n  box-shadow: #091e4240 0 1px 0 0;\n`;\n","import { DragItem } from \"../dragAndDrop/DragItem\";\n\nexport enum ActionTypes {\n  addList = \"ADD_LIST\",\n  addTask = \"ADD_TASK\",\n  moveList = \"MOVE_LIST\",\n  setDraggedItem = \"SET_DRAGGED_ITEM\",\n  moveTask = \"MOVE_TASK\",\n}\n\nexport type Action =\n  | {\n      type: ActionTypes.addList;\n      payload: string;\n    }\n  | {\n      type: ActionTypes.addTask;\n      payload: {\n        text: string;\n        listId: string;\n      };\n    }\n  | {\n      type: ActionTypes.moveList;\n      payload: {\n        dragIndex: number;\n        hoverIndex: number;\n      };\n    }\n  | {\n      type: ActionTypes.setDraggedItem;\n      payload: DragItem | undefined;\n    }\n  | {\n      type: ActionTypes.moveTask;\n      payload: {\n        dragIndex: number;\n        hoverIndex: number;\n        sourceColumn: string;\n        targetColumn: string;\n      };\n    };\n","import React, { useState } from \"react\";\n\nimport {\n  NewItemButton,\n  NewItemFormContainer,\n  NewItemInput,\n} from \"../styles/styles\";\nimport { useFocus } from \"../hooks/useFocus\";\n\ninterface NewItemFormProps {\n  onAdd(text: string): void;\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n  const [text, setText] = useState(\"\");\n  const ref = useFocus();\n\n  return (\n    <NewItemFormContainer>\n      <NewItemInput\n        ref={ref}\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <NewItemButton onClick={() => onAdd(text)}>Create</NewItemButton>\n    </NewItemFormContainer>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\nexport const useFocus = () => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    ref.current?.focus();\n  }, []);\n\n  return ref;\n};\n","import React, { useState } from \"react\";\nimport { AddItemButton } from \"../styles/styles\";\nimport { NewItemForm } from \"./NewItemForm\";\n\ninterface AddNewItemProps {\n  onAdd(text: string): void;\n  toggleButtonText: string;\n  dark?: boolean;\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n  const [showForm, setShowForm] = useState(false);\n  const { onAdd, toggleButtonText, dark } = props;\n\n  if (showForm) {\n    return (\n      <NewItemForm\n        onAdd={(text) => {\n          onAdd(text);\n          setShowForm(false);\n        }}\n      />\n    );\n  }\n\n  return (\n    <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n      {toggleButtonText}\n    </AddItemButton>\n  );\n};\n","export enum DragTypes {\n  column = \"COLUMN\",\n  card = \"CARD\",\n}\n\nexport type ColumnDragItem = {\n  type: DragTypes.column;\n  id: string;\n  text: string;\n  index: number;\n};\n\nexport type CardDragItem = {\n  type: DragTypes.card;\n  id: string;\n  text: string;\n  index: number;\n  columnId: string;\n};\n\nexport type DragItem = ColumnDragItem | CardDragItem;\n","interface Item {\n  id: string;\n}\n\nexport const findItemIndexById = <T extends Item>(\n  items: T[],\n  id: string\n): number => {\n  return items.findIndex((item) => item.id === id);\n};\n","import { Action, ActionTypes } from \"../actions/types\";\nimport { nanoid } from \"nanoid\";\nimport { findItemIndexById } from \"../utils/findItemIndexById\";\nimport { moveItem } from \"../utils/moveItem\";\nimport { AppState } from \"./types\";\n\nexport const appStateReducer = (state: AppState, action: Action): AppState => {\n  switch (action.type) {\n    case ActionTypes.addList: {\n      return {\n        ...state,\n        lists: [\n          ...state.lists,\n          { id: nanoid(), text: action.payload, tasks: [] },\n        ],\n      };\n    }\n    case ActionTypes.addTask: {\n      const targetLaneIndex = findItemIndexById(\n        state.lists,\n        action.payload.listId\n      );\n      state.lists[targetLaneIndex].tasks.push({\n        id: nanoid(),\n        text: action.payload.text,\n      });\n      return {\n        ...state,\n      };\n    }\n    case ActionTypes.moveList: {\n      const { dragIndex, hoverIndex } = action.payload;\n      state.lists = moveItem(state.lists, dragIndex, hoverIndex);\n      return {\n        ...state,\n      };\n    }\n\n    case ActionTypes.setDraggedItem: {\n      return { ...state, draggedItem: action.payload };\n    }\n\n    case ActionTypes.moveTask: {\n      const {\n        dragIndex,\n        hoverIndex,\n        sourceColumn,\n        targetColumn,\n      } = action.payload;\n\n      const sourceLaneIndex = findItemIndexById(state.lists, sourceColumn);\n      const targetLaneIndex = findItemIndexById(state.lists, targetColumn);\n\n      const item = state.lists[sourceLaneIndex].tasks.splice(dragIndex, 1)[0];\n      state.lists[targetLaneIndex].tasks.splice(hoverIndex, 0, item);\n\n      return { ...state };\n    }\n\n    default:\n      return state;\n  }\n};\n","export const moveItem = <T>(array: T[], from: number, to: number) => {\n  const startIndex = to < 0 ? array.length + to : to;\n  [array[from], array[startIndex]] = [array[startIndex], array[from]];\n  return array;\n};\n","import React, { useReducer } from \"react\";\nimport { createContext } from \"react\";\nimport { Action } from \"../actions/types\";\nimport { appStateReducer } from \"../reducers/appState\";\nimport { AppState } from \"../reducers/types\";\n\nconst appData: AppState = {\n  draggedItem: undefined,\n  lists: [\n    {\n      id: \"0\",\n      text: \"To Do\",\n      tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }],\n    },\n    {\n      id: \"1\",\n      text: \"In Progress\",\n      tasks: [{ id: \"c2\", text: \"Learn Typescript\" }],\n    },\n    {\n      id: \"2\",\n      text: \"Done\",\n      tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }],\n    },\n  ],\n};\n\ninterface AppStateContextProps {\n  state: AppState;\n  dispatch: React.Dispatch<Action>;\n}\n\nexport const AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n);\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData);\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n","import { useContext } from \"react\";\nimport { AppStateContext } from \"../components/AppStateContext\";\n\nexport const useAppState = () => {\n  return useContext(AppStateContext);\n};\n","import { useDrag } from \"react-dnd\";\nimport { useAppState } from \"./useAppState\";\nimport { DragItem } from \"../dragAndDrop/DragItem\";\nimport { useEffect } from \"react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\nimport { ActionTypes } from \"../actions/types\";\n\nexport const useItemDrag = (item: DragItem) => {\n  const { dispatch } = useAppState();\n  const [, drag, preview] = useDrag({\n    item,\n    begin: () => {\n      dispatch({\n        type: ActionTypes.setDraggedItem,\n        payload: item,\n      });\n    },\n    end: () => {\n      dispatch({\n        type: ActionTypes.setDraggedItem,\n        payload: undefined,\n      });\n    },\n  });\n\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, [preview]);\n\n  return { drag };\n};\n","import { DragItem } from \"../dragAndDrop/DragItem\";\n\nexport const isHidden = (\n  isPreview: boolean | undefined,\n  draggedItem: DragItem | undefined,\n  itemType: string,\n  id: string\n): boolean => {\n  return Boolean(\n    !isPreview &&\n      draggedItem &&\n      draggedItem.type === itemType &&\n      draggedItem.id === id\n  );\n};\n","import React, { useRef } from \"react\";\n\nimport { CardContainer } from \"../styles/styles\";\nimport { useDrop } from \"react-dnd\";\nimport { CardDragItem, DragTypes } from \"../dragAndDrop/DragItem\";\nimport { useAppState } from \"../hooks/useAppState\";\nimport { useItemDrag } from \"../hooks/useItemDrag\";\nimport { isHidden } from \"../utils/isHidden\";\nimport { ActionTypes } from \"../actions/types\";\n\ninterface CardProps {\n  text: string;\n  id: string;\n  index: number;\n  columnId: string;\n  isPreview?: boolean;\n}\n\nexport const Card = ({ text, id, index, columnId, isPreview }: CardProps) => {\n  const { dispatch, state } = useAppState();\n\n  const { drag } = useItemDrag({\n    type: DragTypes.card,\n    id,\n    text,\n    index,\n    columnId,\n  });\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [, drop] = useDrop({\n    accept: DragTypes.card,\n    hover(item: CardDragItem) {\n      if (item.id === id) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      const sourceColumn = item.columnId;\n      const targetColumn = columnId;\n      dispatch({\n        type: ActionTypes.moveTask,\n        payload: {\n          dragIndex,\n          hoverIndex,\n          sourceColumn,\n          targetColumn,\n        },\n      });\n      item.index = hoverIndex;\n      item.columnId = targetColumn;\n    },\n  });\n\n  drag(drop(ref));\n\n  return (\n    <CardContainer\n      ref={ref}\n      isHidden={isHidden(isPreview, state.draggedItem, DragTypes.card, id)}\n      isPreview={isPreview}\n    >\n      {text}\n    </CardContainer>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { ColumnContainer, ColumnTitle } from \"../styles/styles\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { useAppState } from \"../hooks/useAppState\";\nimport { Card } from \"./Card\";\nimport { useDrop } from \"react-dnd\";\nimport { useItemDrag } from \"../hooks/useItemDrag\";\nimport { DragItem, DragTypes } from \"../dragAndDrop/DragItem\";\nimport { isHidden } from \"../utils/isHidden\";\nimport { ActionTypes } from \"../actions/types\";\n\ninterface ColumnProps {\n  text: string;\n  index: number;\n  id: string;\n  isPreview?: boolean;\n}\n\nexport const Column = ({ text, index, id, isPreview }: ColumnProps) => {\n  const { state, dispatch } = useAppState();\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [, drop] = useDrop({\n    accept: [DragTypes.column, DragTypes.card],\n    hover: (item: DragItem) => {\n      if (item.type === DragTypes.column) {\n        const dragIndex = item.index;\n        const hoverIndex = index;\n\n        if (dragIndex === hoverIndex) {\n          return;\n        }\n\n        dispatch({\n          type: ActionTypes.moveList,\n          payload: {\n            dragIndex,\n            hoverIndex,\n          },\n        });\n        item.index = hoverIndex;\n      } else {\n        const dragIndex = item.index;\n        const hoverIndex = 0;\n        const sourceColumn = item.columnId;\n        const targetColumn = id;\n        if (sourceColumn === targetColumn) {\n          return;\n        }\n\n        dispatch({\n          type: ActionTypes.moveTask,\n          payload: {\n            dragIndex,\n            hoverIndex,\n            sourceColumn,\n            targetColumn,\n          },\n        });\n        item.index = hoverIndex;\n        item.columnId = targetColumn;\n      }\n    },\n  });\n\n  const { drag } = useItemDrag({\n    id,\n    text,\n    index,\n    type: DragTypes.column,\n  });\n\n  drag(drop(ref));\n\n  return (\n    <ColumnContainer\n      ref={ref}\n      isHidden={isHidden(isPreview, state.draggedItem, DragTypes.column, id)}\n      isPreview={isPreview}\n    >\n      <ColumnTitle>{text}</ColumnTitle>\n      {state.lists[index].tasks.map((task, taskIndex) => (\n        <Card\n          id={task.id}\n          text={task.text}\n          key={task.id}\n          index={taskIndex}\n          columnId={state.lists[index].id}\n        />\n      ))}\n      <AddNewItem\n        onAdd={(task) => {\n          console.log(\"add\");\n          dispatch({\n            type: ActionTypes.addTask,\n            payload: {\n              text: task,\n              listId: id,\n            },\n          });\n        }}\n        toggleButtonText={\"+ Add another task\"}\n        dark\n      />\n    </ColumnContainer>\n  );\n};\n","import { useDragLayer, XYCoord } from \"react-dnd\";\nimport React from \"react\";\nimport { CustomDragLayerContainer } from \"../styles/styles\";\nimport { Column } from \"../components/Column\";\nimport { Card } from \"../components/Card\";\nimport { DragTypes } from \"./DragItem\";\n\nfunction getItemStyles(currentOffset: XYCoord | null): React.CSSProperties {\n  if (!currentOffset) {\n    return {\n      display: \"none\",\n    };\n  }\n\n  const { x, y } = currentOffset;\n\n  const transform = `translate(${x}px, ${y}px)`;\n  return {\n    transform,\n    WebkitTransform: transform,\n  };\n}\n\nexport const CustomDragLayer: React.FC = () => {\n  const { isDragging, item, currentOffset } = useDragLayer((monitor) => ({\n    item: monitor.getItem(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging(),\n  }));\n\n  if (!isDragging) {\n    return null;\n  }\n\n  return (\n    <CustomDragLayerContainer>\n      <div style={getItemStyles(currentOffset)}>\n        {item.type === DragTypes.column ? (\n          <Column\n            text={item.text}\n            index={item.index}\n            id={item.id}\n            isPreview={true}\n          />\n        ) : (\n          <Card\n            id={item.id}\n            index={item.index}\n            text={item.text}\n            isPreview={true}\n            columnId={item.columnId}\n          />\n        )}\n      </div>\n    </CustomDragLayerContainer>\n  );\n};\n","import React from \"react\";\nimport { AppContainer } from \"../styles/styles\";\nimport { Column } from \"./Column\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { useAppState } from \"../hooks/useAppState\";\nimport { CustomDragLayer } from \"../dragAndDrop/customDragLayer\";\nimport { ActionTypes } from \"../actions/types\";\n\nfunction App() {\n  const { state, dispatch } = useAppState();\n\n  return (\n    <AppContainer>\n      <CustomDragLayer />\n      {state.lists.map((list, i) => {\n        return <Column text={list.text} key={list.id} index={i} id={list.id} />;\n      })}\n      <AddNewItem\n        onAdd={(text) => dispatch({ type: ActionTypes.addList, payload: text })}\n        toggleButtonText={\"+ Add another list\"}\n      />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport { AppStateProvider } from \"./components/AppStateContext\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\";\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <AppStateProvider>\n      <App />\n    </AppStateProvider>\n  </DndProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}