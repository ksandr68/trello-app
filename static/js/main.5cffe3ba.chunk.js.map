{"version":3,"sources":["styles.ts","NewItemForm.tsx","useFocus.ts","AddNewItem.tsx","utils/findItemIndexById.ts","AppStateContext.tsx","utils/moveItem.ts","useAppState.ts","useItemDrag.ts","utils/isHidden.ts","Card.tsx","Column.tsx","customDragLayer.tsx","App.tsx","index.tsx"],"names":["AppContainer","styled","div","ColumnTitle","AddItemButton","button","props","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","DragPreviewContainer","isHidden","isPreview","undefined","ColumnContainer","CustomDragLayerContainer","CardContainer","NewItemForm","onAdd","useState","text","setText","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","findItemIndexById","items","id","findIndex","item","appData","draggedItem","lists","tasks","AppStateContext","createContext","appStateReducer","state","action","type","nanoid","payload","targetLaneIndex","listId","push","dragIndex","hoverIndex","array","from","to","startIndex","length","moveItem","sourceColumn","targetColumn","sourceLaneIndex","splice","AppStateProvider","children","useReducer","dispatch","Provider","useAppState","useContext","useItemDrag","useDrag","begin","end","drag","preview","getEmptyImage","captureDraggingState","itemType","Boolean","Card","index","columnId","useDrop","accept","hover","drop","Column","console","log","map","task","taskIndex","key","getItemStyles","currentOffset","display","x","y","transform","WebkitTransform","CustomDragLayer","useDragLayer","monitor","getItem","getSourceClientOffset","isDragging","style","App","list","i","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.5cffe3ba.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const AppContainer = styled.div`\n  align-items: flex-start;\n  background-color: #3179ba;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  padding: 20px;\n  width: 100%;\n`;\n\nexport const ColumnTitle = styled.div`\n  padding: 6px 16px 12px;\n  font-weight: bold;\n`;\n\ninterface AddItemButtonProps {\n  dark?: boolean;\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n  background-color: #ffffff3d;\n  border-radius: 3px;\n  border: none;\n  color: ${(props) => (props.dark ? \"#000\" : \"#fff\")};\n  cursor: pointer;\n  max-width: 300px;\n  padding: 10px 12px;\n  text-align: left;\n  transition: background 85ms ease-in;\n  width: 100%;\n  &:hover {\n    background: #ffffff52;\n  }\n`;\n\nexport const NewItemFormContainer = styled.div`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: flex-start;\n`;\n\nexport const NewItemButton = styled.button`\n  background-color: #5aac44;\n  border-radius: 3px;\n  border: none;\n  box-shadow: none;\n  color: #fff;\n  padding: 6px 12px;\n  text-align: center;\n`;\n\nexport const NewItemInput = styled.input`\n  border-radius: 3px;\n  border: none;\n  box-shadow: #091e4240 0 1px 0 0;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  width: 100%;\n`;\n\ninterface DragPreviewContainerProps {\n  isHidden?: boolean;\n  isPreview?: boolean;\n}\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n  opacity: ${(props) => (props.isHidden ? 0 : 1)};\n  transform: ${(props) => (props.isPreview ? \"rotate(5deg)\" : undefined)};\n`;\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n  background-color: #ebecf0;\n  width: 300px;\n  min-height: 40px;\n  margin-right: 20px;\n  border-radius: 3px;\n  padding: 8px;\n  flex-grow: 0;\n`;\n\nexport const CustomDragLayerContainer = styled.div`\n  height: 100%;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n`;\n\nexport const CardContainer = styled(DragPreviewContainer)`\n  background: #fff;\n  cursor: pointer;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  max-width: 300px;\n  border-radius: 3px;\n  box-shadow: #091e4240 0 1px 0 0;\n`;\n","import React, { useState } from \"react\";\n\nimport { NewItemButton, NewItemFormContainer, NewItemInput } from \"./styles\";\nimport { useFocus } from \"./useFocus\";\n\ninterface NewItemFormProps {\n  onAdd(text: string): void;\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n  const [text, setText] = useState(\"\");\n  const ref = useFocus();\n\n  return (\n    <NewItemFormContainer>\n      <NewItemInput\n        ref={ref}\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <NewItemButton onClick={() => onAdd(text)}>Create</NewItemButton>\n    </NewItemFormContainer>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\nexport const useFocus = () => {\n  const ref = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    ref.current?.focus();\n  }, []);\n\n  return ref;\n};\n","import React, { useState } from \"react\";\nimport { AddItemButton } from \"./styles\";\nimport { NewItemForm } from \"./NewItemForm\";\n\ninterface AddNewItemProps {\n  onAdd(text: string): void;\n  toggleButtonText: string;\n  dark?: boolean;\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n  const [showForm, setShowForm] = useState(false);\n  const { onAdd, toggleButtonText, dark } = props;\n\n  if (showForm) {\n    return (\n      <NewItemForm\n        onAdd={(text) => {\n          onAdd(text);\n          setShowForm(false);\n        }}\n      />\n    );\n  }\n\n  return (\n    <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n      {toggleButtonText}\n    </AddItemButton>\n  );\n};\n","interface Item {\n  id: string;\n}\n\nexport const findItemIndexById = <T extends Item>(\n  items: T[],\n  id: string\n): number => {\n  return items.findIndex((item) => item.id === id);\n};\n","import React, { useReducer } from \"react\";\nimport { createContext } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { findItemIndexById } from \"./utils/findItemIndexById\";\nimport { moveItem } from \"./utils/moveItem\";\nimport { DragItem } from \"./DragItem\";\n\nconst appData: AppState = {\n  draggedItem: undefined,\n  lists: [\n    {\n      id: \"0\",\n      text: \"To Do\",\n      tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }],\n    },\n    {\n      id: \"1\",\n      text: \"In Progress\",\n      tasks: [{ id: \"c2\", text: \"Learn Typescript\" }],\n    },\n    {\n      id: \"2\",\n      text: \"Done\",\n      tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }],\n    },\n  ],\n};\n\ninterface Task {\n  id: string;\n  text: string;\n}\n\ninterface Todo {\n  id: string;\n  text: string;\n  tasks: Task[];\n}\n\ninterface AppState {\n  lists: Todo[];\n  draggedItem: DragItem | undefined;\n}\n\ninterface AppStateContextProps {\n  state: AppState;\n  dispatch: React.Dispatch<Action>;\n}\n\nexport const AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n);\n\ntype Action =\n  | {\n      type: \"ADD_LIST\";\n      payload: string;\n    }\n  | {\n      type: \"ADD_TASK\";\n      payload: {\n        text: string;\n        listId: string;\n      };\n    }\n  | {\n      type: \"MOVE_LIST\";\n      payload: {\n        dragIndex: number;\n        hoverIndex: number;\n      };\n    }\n  | {\n      type: \"SET_DRAGGED_ITEM\";\n      payload: DragItem | undefined;\n    }\n  | {\n      type: \"MOVE_TASK\";\n      payload: {\n        dragIndex: number;\n        hoverIndex: number;\n        sourceColumn: string;\n        targetColumn: string;\n      };\n    };\n\nconst appStateReducer = (state: AppState, action: Action): AppState => {\n  switch (action.type) {\n    case \"ADD_LIST\": {\n      return {\n        ...state,\n        lists: [\n          ...state.lists,\n          { id: nanoid(), text: action.payload, tasks: [] },\n        ],\n      };\n    }\n    case \"ADD_TASK\": {\n      const targetLaneIndex = findItemIndexById(\n        state.lists,\n        action.payload.listId\n      );\n      state.lists[targetLaneIndex].tasks.push({\n        id: nanoid(),\n        text: action.payload.text,\n      });\n      return {\n        ...state,\n      };\n    }\n    case \"MOVE_LIST\": {\n      const { dragIndex, hoverIndex } = action.payload;\n      state.lists = moveItem(state.lists, dragIndex, hoverIndex);\n      return {\n        ...state,\n      };\n    }\n\n    case \"SET_DRAGGED_ITEM\": {\n      return { ...state, draggedItem: action.payload };\n    }\n\n    case \"MOVE_TASK\": {\n      const {\n        dragIndex,\n        hoverIndex,\n        sourceColumn,\n        targetColumn,\n      } = action.payload;\n\n      const sourceLaneIndex = findItemIndexById(state.lists, sourceColumn);\n      const targetLaneIndex = findItemIndexById(state.lists, targetColumn);\n\n      const item = state.lists[sourceLaneIndex].tasks.splice(dragIndex, 1)[0];\n      state.lists[targetLaneIndex].tasks.splice(hoverIndex, 0, item);\n\n      return { ...state };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData);\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  );\n};\n","export const moveItem = <T>(array: T[], from: number, to: number) => {\n  const startIndex = to < 0 ? array.length + to : to;\n  [array[from], array[startIndex]] = [array[startIndex], array[from]];\n  return array;\n};\n","import { useContext } from \"react\";\nimport { AppStateContext } from \"./AppStateContext\";\n\nexport const useAppState = () => {\n  return useContext(AppStateContext);\n};\n","import { useDrag } from \"react-dnd\";\nimport { useAppState } from \"./useAppState\";\nimport { DragItem } from \"./DragItem\";\nimport { useEffect } from \"react\";\nimport { getEmptyImage } from \"react-dnd-html5-backend\";\n\nexport const useItemDrag = (item: DragItem) => {\n  const { dispatch } = useAppState();\n  const [, drag, preview] = useDrag({\n    item,\n    begin: () => {\n      dispatch({\n        type: \"SET_DRAGGED_ITEM\",\n        payload: item,\n      });\n    },\n    end: () => {\n      dispatch({\n        type: \"SET_DRAGGED_ITEM\",\n        payload: undefined,\n      });\n    },\n  });\n\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, [preview]);\n\n  return { drag };\n};\n","import { DragItem } from \"../DragItem\";\n\nexport const isHidden = (\n  isPreview: boolean | undefined,\n  draggedItem: DragItem | undefined,\n  itemType: string,\n  id: string\n): boolean => {\n  return Boolean(\n    !isPreview &&\n      draggedItem &&\n      draggedItem.type === itemType &&\n      draggedItem.id === id\n  );\n};\n","import React, { useRef } from \"react\";\n\nimport { CardContainer } from \"./styles\";\nimport { useDrop } from \"react-dnd\";\nimport { CardDragItem } from \"./DragItem\";\nimport { useAppState } from \"./useAppState\";\nimport { useItemDrag } from \"./useItemDrag\";\nimport { isHidden } from \"./utils/isHidden\";\n\ninterface CardProps {\n  text: string;\n  id: string;\n  index: number;\n  columnId: string;\n  isPreview?: boolean;\n}\n\nexport const Card = ({ text, id, index, columnId, isPreview }: CardProps) => {\n  const { dispatch, state } = useAppState();\n\n  const { drag } = useItemDrag({\n    type: \"CARD\",\n    id,\n    text,\n    index,\n    columnId,\n  });\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [, drop] = useDrop({\n    accept: \"CARD\",\n    hover(item: CardDragItem) {\n      if (item.id === id) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      const sourceColumn = item.columnId;\n      const targetColumn = columnId;\n      dispatch({\n        type: \"MOVE_TASK\",\n        payload: {\n          dragIndex,\n          hoverIndex,\n          sourceColumn,\n          targetColumn,\n        },\n      });\n      item.index = hoverIndex;\n      item.columnId = targetColumn;\n    },\n  });\n\n  drag(drop(ref));\n\n  return (\n    <CardContainer\n      ref={ref}\n      isHidden={isHidden(isPreview, state.draggedItem, \"CARD\", id)}\n      isPreview={isPreview}\n    >\n      {text}\n    </CardContainer>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { ColumnContainer, ColumnTitle } from \"./styles\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { useAppState } from \"./useAppState\";\nimport { Card } from \"./Card\";\nimport { useDrop } from \"react-dnd\";\nimport { useItemDrag } from \"./useItemDrag\";\nimport { DragItem } from \"./DragItem\";\nimport { isHidden } from \"./utils/isHidden\";\n\ninterface ColumnProps {\n  text: string;\n  index: number;\n  id: string;\n  isPreview?: boolean;\n}\n\nexport const Column = ({ text, index, id, isPreview }: ColumnProps) => {\n  const { state, dispatch } = useAppState();\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [, drop] = useDrop({\n    accept: [\"COLUMN\", \"CARD\"],\n    hover: (item: DragItem) => {\n      if (item.type === \"COLUMN\") {\n        const dragIndex = item.index;\n        const hoverIndex = index;\n\n        if (dragIndex === hoverIndex) {\n          return;\n        }\n\n        dispatch({\n          type: \"MOVE_LIST\",\n          payload: {\n            dragIndex,\n            hoverIndex,\n          },\n        });\n        item.index = hoverIndex;\n      } else {\n        const dragIndex = item.index;\n        const hoverIndex = 0;\n        const sourceColumn = item.columnId;\n        const targetColumn = id;\n        if (sourceColumn === targetColumn) {\n          return;\n        }\n\n        dispatch({\n          type: \"MOVE_TASK\",\n          payload: {\n            dragIndex,\n            hoverIndex,\n            sourceColumn,\n            targetColumn,\n          },\n        });\n        item.index = hoverIndex;\n        item.columnId = targetColumn;\n      }\n    },\n  });\n\n  const { drag } = useItemDrag({\n    id,\n    text,\n    index,\n    type: \"COLUMN\",\n  });\n\n  drag(drop(ref));\n\n  console.log(isPreview);\n\n  return (\n    <ColumnContainer\n      ref={ref}\n      isHidden={isHidden(isPreview, state.draggedItem, \"COLUMN\", id)}\n      isPreview={isPreview}\n    >\n      <ColumnTitle>{text}</ColumnTitle>\n      {state.lists[index].tasks.map((task, taskIndex) => (\n        <Card\n          id={task.id}\n          text={task.text}\n          key={task.id}\n          index={taskIndex}\n          columnId={state.lists[index].id}\n        />\n      ))}\n      <AddNewItem\n        onAdd={(task) => {\n          console.log(\"add\");\n          dispatch({\n            type: \"ADD_TASK\",\n            payload: {\n              text: task,\n              listId: id,\n            },\n          });\n        }}\n        toggleButtonText={\"+ Add another task\"}\n        dark\n      />\n    </ColumnContainer>\n  );\n};\n","import { useDragLayer, XYCoord } from \"react-dnd\";\nimport React from \"react\";\nimport { CustomDragLayerContainer } from \"./styles\";\nimport { Column } from \"./Column\";\nimport { Card } from \"./Card\";\n\nfunction getItemStyles(currentOffset: XYCoord | null): React.CSSProperties {\n  if (!currentOffset) {\n    return {\n      display: \"none\",\n    };\n  }\n\n  const { x, y } = currentOffset;\n\n  const transform = `translate(${x}px, ${y}px)`;\n  return {\n    transform,\n    WebkitTransform: transform,\n  };\n}\n\nexport const CustomDragLayer: React.FC = () => {\n  const { isDragging, item, currentOffset } = useDragLayer((monitor) => ({\n    item: monitor.getItem(),\n    currentOffset: monitor.getSourceClientOffset(),\n    isDragging: monitor.isDragging(),\n  }));\n\n  if (!isDragging) {\n    return null;\n  }\n\n  return (\n    <CustomDragLayerContainer>\n      <div style={getItemStyles(currentOffset)}>\n        {item.type === \"COLUMN\" ? (\n          <Column\n            text={item.text}\n            index={item.index}\n            id={item.id}\n            isPreview={true}\n          />\n        ) : (\n          <Card\n            id={item.id}\n            index={item.index}\n            text={item.text}\n            isPreview={true}\n            columnId={item.columnId}\n          />\n        )}\n      </div>\n    </CustomDragLayerContainer>\n  );\n};\n","import React from \"react\";\nimport { AppContainer } from \"./styles\";\nimport { Column } from \"./Column\";\nimport { AddNewItem } from \"./AddNewItem\";\nimport { useAppState } from \"./useAppState\";\nimport { CustomDragLayer } from \"./customDragLayer\";\n\nfunction App() {\n  const { state, dispatch } = useAppState();\n\n  return (\n    <AppContainer>\n      <CustomDragLayer />\n      {state.lists.map((list, i) => {\n        return <Column text={list.text} key={list.id} index={i} id={list.id} />;\n      })}\n      <AddNewItem\n        onAdd={(text) => dispatch({ type: \"ADD_LIST\", payload: text })}\n        toggleButtonText={\"+ Add another list\"}\n      />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppStateProvider } from \"./AppStateContext\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\";\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <AppStateProvider>\n      <App />\n    </AppStateProvider>\n  </DndProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}